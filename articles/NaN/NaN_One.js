


‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶ï‡¶®‡¶´‡¶ø‡¶â‡¶ú‡¶ø‡¶Ç üôÑ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶¶‡¶ò‡ßÅ‡¶ü‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏ ‡¶π‡¶ö‡ßç‡¶õ‡ßá **`NaN`** ‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶®‡¶∏‡ßá‡¶™‡ßç‡¶ü ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶æ‡¶∞ ‡¶Ø‡ßá‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ ‡¶∏‡¶≤‡ßç‡¶Ø‡ßÅ‡¶∂‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶ñ‡ßÅ‡¶¨ ‡¶∏‡¶π‡¶ú‡ßá üòâ

```
NaN = Not a Number
```

‡¶è‡¶ü‡¶æ **`number`** ‡¶§‡¶¨‡ßá **legal ‡¶ï‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶®‡ßü** ‡•§ **`NaN`** ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶ú‡¶æ‡¶∏‡ßç‡¶ü ‡¶è‡¶ï‡¶ü‡¶æ **`global property`** ‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ü‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá‡¶® **`typeof`** ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶¨‡ßá‡¶® **`number`**

```
console.log(typeof NaN); // number
```

‡¶è‡¶ü‡¶æ ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶Æ‡ßç‡¶™‡ßá‡¶∞‡¶ø‡¶ú‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ø‡¶æ‡¶® ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶¨‡ßá‡¶® ‡¶Ü‡¶∞‡ßá‡¶ï ‡¶ï‡¶®‡¶´‡¶ø‡¶â‡¶ú‡¶ø‡¶Ç ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏

```
console.log(NaN == NaN); // false
console.log(NaN === NaN); // false
```

‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶Æ‡¶® ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶è‡¶ü‡¶æ ‡¶ï‡¶Æ‡ßç‡¶™‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?
‡¶∏‡¶≤‡ßç‡¶Ø‡ßÅ‡¶∂‡¶® ‡ß®‡¶ü‡¶æ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ---

```
1. isNaN() global function ‡¶¶‡¶ø‡ßü‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
2. Number.isNaN() ‡¶Æ‡ßá‡¶•‡¶° ‡¶¶‡¶ø‡ßü‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
```

‡¶§‡ßã ‡¶Ü‡¶ú‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ isNaN() ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶®‡¶¨‡•§ isNaN() function ‡¶Ü‡¶∞‡ßç‡¶ó‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá `value` ‡¶∞‡¶ø‡¶∏‡¶ø‡¶≠ ‡¶ï‡¶∞‡ßá ‡•§ ‡¶è‡¶á ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶Ø‡¶¶‡¶ø `NaN` ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá isNaN() function **`true`** ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá ‡•§ ‡¶Ü‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ NaN ‡¶®‡¶æ ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá **`false`** ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá ‡•§ ‡¶è‡¶ñ‡¶® ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ NaN ‡¶ï‡¶ø‡¶®‡¶æ ‡¶è‡¶ü‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶ò‡ßÅ‡¶∞‡ßá‡¶´‡¶ø‡¶∞‡ßá ‡¶è‡¶ï‡¶á ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ ‡•§ ‡¶ü‡ßá‡¶®‡¶∂‡¶®‡ßá‡¶∞ ‡¶ï‡ßã‡¶® ‡¶ï‡¶æ‡¶∞‡¶® ‡¶®‡ßá‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶è‡¶ü‡¶æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶≤‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶¨‡¶≤‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶®‡¶æ ‡¶è‡¶á ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ NaN ‡¶ï‡¶ø‡¶®‡¶æ‡•§ **‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶¨‡ßá** ‡•§ ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡ßü‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá‡¶∞ `Number()` ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡ßá ‡¶ï‡¶æ‡¶ú‡ßá ‡¶≤‡¶æ‡¶ó‡¶ø‡ßü‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶≤‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶ø ‡¶ö‡¶≤‡ßá‡¶® ---

```
console.log(Number(10)); // 10
console.log(Number('Hello')); // NaN
```

‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶è ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶è‡¶ü‡¶æ‡¶ï‡ßá number ‡¶è ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßá‡¶∞‡ßá‡¶õ‡ßá ‡¶§‡¶æ‡¶á number `10` ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡•§ ‡¶™‡¶∞‡ßá‡¶∞ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶è ‡¶è‡¶ü‡¶æ‡¶ï‡ßá ‡¶∏‡ßá number ‡¶è ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡¶ø ‡¶§‡¶æ‡¶á `NaN` ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡•§

‡¶è‡¶ñ‡¶® ‡¶ö‡¶≤‡ßá‡¶® ‡¶Æ‡ßÇ‡¶≤ ‡¶ï‡¶æ‡¶ú‡ßá ---

```
console.log(isNaN(10)); // false
console.log(isNaN('Hello')); // true
```

‡¶è‡¶á ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡ßá isNaN() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá `10` ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¶‡ßá‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡•§ isNaN() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶è‡¶ü‡¶æ‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡•§ ‡¶∏‡ßá ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ï‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßá‡¶∞‡ßá‡¶õ‡ßá‡•§ ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ 10 ‡¶è‡¶ï‡¶ü‡¶æ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶§‡¶æ‡¶á `false` ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶ó‡ßá‡¶á ‡¶¨‡¶≤‡ßá‡¶õ‡¶ø ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶Ø‡¶¶‡¶ø `NaN` ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá **`true`** ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø‡¶•‡¶æ‡ßü **`false`** ‡•§

‡¶®‡¶ø‡¶ö‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶≤‡¶æ‡¶Æ ‡¶¨‡ßÅ‡¶ù‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§ ‡¶ï‡ßã‡¶° ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá‡¶® ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ñ‡ßÅ‡¶¨ ‡¶∏‡¶π‡¶ú‡ßá ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶ï‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶∏ ‡¶è‡¶á ‡¶§‡ßã

```
console.log(Number(10)); // 10
console.log(Number('Hello')); // NaN
console.log(Number('5')); // 5
console.log(Number(NaN)); // NaN
console.log(Number('NaN')); // NaN
console.log(Number(null)); // 0
console.log(Number(undefined)); // NaN
console.log(Number({})); // NaN
console.log(Number([])); // 0
console.log(Number('123ABC')); // NaN
console.log(Number('')); // 0
console.log(Number(true)) // 1
console.log(Number(false)) // 0

console.log(isNaN(10)); // false
console.log(isNaN('Hello')); // true
console.log(isNaN('5')); // false
console.log(isNaN(NaN)); // true
console.log(isNaN('NaN')); // true
console.log(isNaN(null)); // false
console.log(isNaN(undefined)); // true
console.log(isNaN({})); // true
console.log(isNaN([])); // false
console.log(isNaN('')); // false
console.log(isNaN(true)); // false
console.log(isNaN(false)); // false
```

‡¶§‡ßã ‡¶Ü‡¶ú‡¶ï‡ßá ‡¶è‡¶á ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶® ‡¶ï‡¶®‡¶´‡¶ø‡¶â‡¶∂‡¶®/‡¶ï‡ßÅ‡ßü‡ßá‡¶∂‡ßç‡¶ö‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶•‡¶æ‡¶ï‡ßá ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§








// ================================ Reference Code ==========================



// Number.isNaN() is an ECMAScript6 (ES6) feature.
// Number.isNaN() returns true if a number is Not-a-Number.
// In JavaScript, NaN is a number that is not a legal number.
// The Number.isNaN() method returns true if the value is NaN, and the type is a Number.


// isNaN(value) er value NaN hole true or false return korbe
// isNaN() er value ke se first e  Number e convert korar try kore. converted value NaN hole isNaN() true or false




// first part code examples

console.log(typeof NaN);
console.log(NaN == NaN);
console.log(NaN === NaN);

console.log(NaN == null);
console.log(Number.NaN === NaN);



console.log(Number(10)); // 10
console.log(Number('Hello')); // NaN
console.log(Number('5')); // 5
console.log(Number(NaN)); // NaN
console.log(Number('NaN')); // NaN
console.log(Number(null)); // 0
console.log(Number(undefined)); // NaN
console.log(Number({})); // NaN
console.log(Number([])); // 0
console.log(Number('123ABC')); // NaN 
console.log(Number('')); // 0
console.log(Number(true)) // 1
console.log(Number(false)) // 0



console.log(isNaN(10)); // false
console.log(isNaN('Hello')); // true
console.log(isNaN('5')); // false
console.log(isNaN(NaN)); // true
console.log(isNaN('NaN')); // true
console.log(isNaN(null)); // false
console.log(isNaN(undefined)); // true
console.log(isNaN({})); // true
console.log(isNaN([])); // false
console.log(isNaN('')); // false
console.log(isNaN(true)); // false
console.log(isNaN(false)); // false



console.log(isNaN(0/0)); // true
console.log(isNaN(0)); // false
console.log(isNaN(1)); // false
console.log(isNaN()); // true


console.log(NaN == Number('Hello'));










